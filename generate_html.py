import os

def generate_task_html(task_json, output_dir="."):
    html = f"""<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Task Brief â€“ LLM App Deployment</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
  <style>
    body {{ background-color: #f6f8fa; margin: 0; font-family: 'Inter', Arial, sans-serif; }}
    .container {{ margin-top: 40px; max-width: 900px; }}
    .brief-header {{ font-size: 2.7rem; font-weight: 900; margin-bottom: .3em;}}
    .label {{ border-radius: 0.6em; font-size: 0.93em; }}
    .section-title {{ margin-top: 2rem; font-weight:600; font-size: 1.35rem;}}
    .attachment-img {{ max-width: 300px; max-height: 210px; border:1.5px solid #eee; margin: 0.6em;}}
    code {{ background: #eaf0f4; color: #095484; border-radius: .25em; padding: 1px 5px; }}
  </style>
</head>
<body>
<div class="container shadow rounded bg-white p-4">
  <div class="mb-3">
    <span class="badge label bg-primary">Task: {task_json.get('task','-')}</span>
    <span class="badge label bg-success">Round: {task_json.get('round','-')}</span>
    <span class="badge label bg-info text-dark">Nonce: {task_json.get('nonce','-')}</span>
    <span class="badge label bg-secondary">Email: {task_json.get('email','-')}</span>
  </div>
  <div class="brief-header">Task Brief</div>
  <div class="mb-4" style="font-size:1.35rem;">{task_json.get('brief', '')}</div>
  <div id="attachments-section">
    <div class="section-title">Attachments</div>
    <div id="attachments-list" class="d-flex flex-wrap">
"""
    for att in task_json.get('attachments', []):
        if att.get('url', '').startswith('data:image/'):
            html += f'<img src="{att["url"]}" alt="{att["name"]}" class="attachment-img"/>'
        else:
            html += f'<div style="margin:.7em;"><b>{att["name"]}</b> <code>[non-image]</code></div>'
    html += """
    </div>
  </div>
  <div id="checks-section">
    <div class="section-title">Evaluation Checks</div>
    <ul id="checks-list">
"""
    for check in task_json.get('checks', []):
        html += f'<li>{check}</li>'
    html += f"""
    </ul>
  </div>
  <div class="section-title mt-4">Meta</div>
  <dl>
    <dt>Evaluation URL</dt><dd>{task_json.get('evaluation_url','-')}</dd>
  </dl>
</div>
</body>
</html>
"""
    with open(os.path.join(output_dir, "index.html"), "w") as f:
        f.write(html)

def generate_task_readme(task_json, output_dir="."):
    readme = f"""
# {task_json.get('task', 'LLM Task App')}

**Round:** {task_json.get('round', '-')}
**Brief:** {task_json.get('brief', '').strip()}

**Attachments:** {', '.join([a['name'] for a in task_json.get('attachments', [])]) if task_json.get('attachments') else 'None'}

**Checks:** 
{os.linesep.join(['- ' + c for c in task_json.get('checks', [])]) if task_json.get('checks') else 'None'}

**Evaluation URL:** {task_json.get('evaluation_url', '-')}

---

This repo is auto-generated by a Flask-based LLM deployment API. MIT License.
"""
    with open(os.path.join(output_dir, "README.md"), "w") as f:
        f.write(readme)

# Example test
task_json = {
    "task": "test-large-payload",
    "round": 1,
    "nonce": "testB-002",
    "email": "tester@example.com",
    "brief": "Send large dummy attachment",
    "attachments": [{"name": "big.bin", "url": "data:application/octet-stream;base64,AAAA"}],
    "checks": ["Page loads", "Attachment present"],
    "evaluation_url": "https://example.com/notify"
}
generate_task_html(task_json)
generate_task_readme(task_json)
